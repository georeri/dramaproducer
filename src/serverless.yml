service: aws-serverless-registration-app

frameworkVersion: '3'

plugins:
  - serverless-wsgi
  - serverless-python-requirements

provider:
  name: aws
  region: ${opt:region, 'us-east-2'}
  stage: ${self:custom.currentStage}
  deploymentMethod: direct
  runtime: python3.9
  httpApi:
    cors: true
    disableDefaultEndpoint: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:345218099459:table/levelup*
            - arn:aws:dynamodb:${self:provider.region}:345218099459:table/levelup*/index/*
  environment:
    # https://www.serverless.com/blog/aws-secrets-management/
    SECRET_KEY: ${ssm:/FLASK_SECRET_KEY}

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: levelup-user-pool-${self:custom.currentStage}
  userPoolClientName: levelup-user-pool-client-${self:custom.currentStage}
  authorizerName: levelup-app-authorizer-${self:custom.currentStage}
  wsgi:
    app: app.app
  pythonRequirements:
    usePipenv: false
    invalidateCaches: true
    strip: false
    slim: true
    slimPatternsAppendDefaults: false
    slimPatterns:
        - "**/*.pyc"
        - "**/*.pyo"
        - "**/__pycache__*"

functions:
  api:
    handler: wsgi_handler.handler
    description: Level Up web-app & interactive API endpoints
    environment:
      FLASK_ENV: development
      GITHUB_TOKEN: ${ssm:/GITHUB_TOKEN}
      SITE_URL: ${ssm:/SITE_URL}
      COGNITO_DOMAIN: ${ssm:/COGNITO_DOMAIN}
      COGNITO_USER_POOL_ID: ${ssm:/COGNITO_USER_POOL_ID}
      COGNITO_USER_POOL_CLIENT_ID: ${ssm:/COGNITO_USER_POOL_CLIENT_ID}
      COGNITO_USER_POOL_CLIENT_SECRET: ${ssm:/COGNITO_USER_POOL_CLIENT_SECRET}
      JWT_PRIVATE_KEY: ${ssm:/JWT_PRIVATE_KEY}
      JWT_SECRET_KEY: ${ssm:/JWT_SECRET_KEY}
      LOGLEVEL: INFO
    events:
      - http: ANY /
      - http: ANY /{proxy+}

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: true
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlows:
          - code
        CallbackURLs:
          - 'http://localhost:8000/aws_cognito_redirect'
          - 'https://app-dev.levelup-program.com/aws_cognito_redirect'
          - 'https://app.levelup-program.com/aws_cognito_redirect'
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
        SupportedIdentityProviders:
          - COGNITO

package:
  patterns:
    - '!node_modules/**'
    - '!package.*'
    - '!Pipfile*'
    - '!static/**'
    - '!*.md'
    - '!Makefile'
    - '!.venv'
    - '!dist'
    - '!docker'
    - '!docker*.*'
    - 'templates/**'

outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}